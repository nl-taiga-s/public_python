import os
import platform
import sys
from pathlib import Path

from PySide6.QtWidgets import (
    QApplication,
    QFileDialog,
    QLabel,
    QListWidget,
    QProgressBar,
    QPushButton,
    QTextEdit,
    QVBoxLayout,
    QWidget,
)

from source.common.common import GUITools, PathTools, PlatformTools


class MainApp_Of_COTP(QWidget):
    def __init__(self, obj_of_cls: object):
        """ÂàùÊúüÂåñ„Åó„Åæ„Åô"""
        super().__init__()
        self.obj_of_pft = PlatformTools()
        self.obj_of_pt = PathTools()
        self.obj_of_cls = None
        self.folder_path_from = ""
        self.folder_path_to = ""
        self.setup_ui(obj_of_cls)

    def closeEvent(self, event):
        """ÁµÇ‰∫Ü„Åó„Åæ„Åô"""
        if self.obj_of_cls is not None:
            self.write_log()
        super().closeEvent(event)

    def setup_ui(self, obj_of_cls: object):
        """User Interface„ÇíË®≠ÂÆö„Åó„Åæ„Åô"""
        # „Çø„Ç§„Éà„É´
        self.setWindowTitle("Office„Éï„Ç°„Ç§„É´ ‚Üí PDF ‰∏ÄÊã¨Â§âÊèõ")
        # „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà
        self.label_from = QLabel("Â§âÊèõÂÖÉ„Éï„Ç©„É´„ÉÄ: Êú™ÈÅ∏Êäû")
        self.btn_select_from = QPushButton("Â§âÊèõÂÖÉ„Éï„Ç©„É´„ÉÄ„ÇíÈÅ∏Êäû")
        self.btn_open_from = QPushButton("Â§âÊèõÂÖÉ„Éï„Ç©„É´„ÉÄ„ÇíÈñã„Åè")
        self.label_to = QLabel("Â§âÊèõÂÖà„Éï„Ç©„É´„ÉÄ: Êú™ÈÅ∏Êäû")
        self.btn_select_to = QPushButton("Â§âÊèõÂÖà„Éï„Ç©„É´„ÉÄ„ÇíÈÅ∏Êäû")
        self.btn_open_to = QPushButton("Â§âÊèõÂÖà„Éï„Ç©„É´„ÉÄ„ÇíÈñã„Åè")
        self.file_list_widget = QListWidget()
        self.progress_bar = QProgressBar()
        self.btn_convert = QPushButton("‰∏ÄÊã¨Â§âÊèõ ÂÆüË°å")
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        # „É¨„Ç§„Ç¢„Ç¶„Éà
        layout = QVBoxLayout()
        layout.addWidget(self.label_from)
        layout.addWidget(self.btn_select_from)
        layout.addWidget(self.btn_open_from)
        layout.addWidget(self.label_to)
        layout.addWidget(self.btn_select_to)
        layout.addWidget(self.btn_open_to)
        layout.addWidget(QLabel("Â§âÊèõÂØæË±°„Éï„Ç°„Ç§„É´‰∏ÄË¶ß:"))
        layout.addWidget(self.file_list_widget)
        layout.addWidget(QLabel("ÈÄ≤Ë°åÁä∂Ê≥Å:"))
        layout.addWidget(self.progress_bar)
        layout.addWidget(self.btn_convert)
        layout.addWidget(QLabel("„É≠„Ç∞:"))
        layout.addWidget(self.log_area)
        self.setLayout(layout)
        # „Ç∑„Ç∞„Éä„É´Êé•Á∂ö
        self.btn_select_from.clicked.connect(lambda: self.select_from_folder(obj_of_cls))
        self.btn_open_from.clicked.connect(lambda: self.open_explorer(self.folder_path_from))
        self.btn_select_to.clicked.connect(lambda: self.select_to_folder(obj_of_cls))
        self.btn_open_to.clicked.connect(lambda: self.open_explorer(self.folder_path_to))
        self.btn_convert.clicked.connect(self.convert_file)

    def output_log(self, message: str):
        """„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„Åæ„Åô"""
        self.log_area.append(message)

    def open_explorer(self, folder: str):
        """„Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº„ÇíÈñã„Åç„Åæ„Åô"""
        if folder:
            try:
                if platform.system().lower() == "windows":
                    os.startfile(folder)
            except Exception as e:
                print(f"„Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„ÉºËµ∑Âãï„Ç®„É©„Éº: {e}")
        else:
            self.output_log("„Éï„Ç©„É´„ÉÄ„ÅåÊú™ÈÅ∏Êäû„ÅÆ„Åü„ÇÅÈñã„Åë„Åæ„Åõ„Çì„ÄÇ")

    def select_from_folder(self, obj_of_cls: object):
        """Â§âÊèõÂÖÉ„ÅÆ„Éï„Ç©„É´„ÉÄ„ÇíÈÅ∏Êäû„Åó„Åæ„Åô"""
        folder = QFileDialog.getExistingDirectory(self, "Â§âÊèõÂÖÉ„ÅÆ„Éï„Ç©„É´„ÉÄ„ÇíÈÅ∏Êäû")
        folder_as_path_type = Path(folder)
        folder = str(folder_as_path_type)
        if folder:
            self.folder_path_from = folder
            self.label_from.setText(f"Â§âÊèõÂÖÉ„Éï„Ç©„É´„ÉÄ: {folder}")
            self.try_load_files(obj_of_cls)

    def select_to_folder(self, obj_of_cls: object):
        """Â§âÊèõÂÖà„ÅÆ„Éï„Ç©„É´„ÉÄ„ÇíÈÅ∏Êäû„Åó„Åæ„Åô"""
        folder = QFileDialog.getExistingDirectory(self, "Â§âÊèõÂÖà„ÅÆ„Éï„Ç©„É´„ÉÄ„ÇíÈÅ∏Êäû")
        folder_as_path_type = Path(folder)
        folder = str(folder_as_path_type)
        if folder:
            self.folder_path_to = folder
            self.label_to.setText(f"Â§âÊèõÂÖà„Éï„Ç©„É´„ÉÄ: {folder}")
            self.try_load_files(obj_of_cls)

    def try_load_files(self, obj_of_cls: object):
        """‰∏°„Éï„Ç©„É´„ÉÄÈÅ∏ÊäûÊ∏à„Åø„Å™„Çâ„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíË°®Á§∫„Åó„Åæ„Åô"""
        if not self.folder_path_from or not self.folder_path_to:
            return
        try:
            self.obj_of_cls = obj_of_cls(self.folder_path_from, self.folder_path_to)
            self.file_list_widget.clear()
            for f in self.obj_of_cls.filtered_list_of_f:
                file_as_path_type = Path(f)
                file_path = file_as_path_type.name
                self.file_list_widget.addItem(file_path)
            self.progress_bar.setValue(0)
        except ValueError as e:
            self.file_list_widget.clear()
            self.output_log(f"‚ö†Ô∏è {e}")
        else:
            self.output_log(f"‚úÖ {self.obj_of_cls.number_of_f} ‰ª∂„ÅÆ„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ")

    def convert_file(self):
        """Â§âÊèõ„Åó„Åæ„Åô"""
        self.output_log_output.clear()
        if self.obj_of_cls is None:
            self.output_log("‚ö†Ô∏è „Éï„Ç°„Ç§„É´„É™„Çπ„Éà„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ")
            return
        total = self.obj_of_cls.number_of_f
        self.progress_bar.setRange(0, total)
        self.output_log("üìÑ ‰∏ÄÊã¨Â§âÊèõ„ÇíÈñãÂßã„Åó„Åæ„Åô...")
        for i in range(total):
            try:
                file_of_currentfrom_as_path_type = Path(self.obj_of_cls.current_of_file_path_from)
                file_name = file_of_currentfrom_as_path_type.name
                self.obj_of_cls.handle_file()
            except Exception as e:
                self.output_log(f"‚ùå {file_name} ‚Üí „Ç®„É©„Éº: {e}")
            else:
                self.output_log(f"‚úÖ {file_name} ‚Üí ÂÆå‰∫Ü")
                self.progress_bar.setValue(i + 1)
                self.obj_of_cls.move_to_next_file()
        self.output_log("üéâ „Åô„Åπ„Å¶„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆÂ§âÊèõ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ")

    def write_log(self):
        """„É≠„Ç∞„ÇíÊõ∏„ÅçÂá∫„Åô"""
        try:
            # exeÂåñ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„Å®„Åù„Çå‰ª•Â§ñ„ÇíÂàá„ÇäÂàÜ„Åë„Çã
            if getattr(sys, "frozen", False):
                exe_path = Path(sys.executable)
            else:
                exe_path = Path(__file__)
            file_of_log_as_path_type = self.obj_of_pt.get_file_path_of_log(exe_path)
            self.obj_of_cls.write_log(file_of_log_as_path_type)
        except Exception as e:
            self.output_log(f"üìÑ „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅÆÂá∫Âäõ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ: \n{e}")
        else:
            self.output_log(f"üìÑ „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅÆÂá∫Âäõ„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü„ÄÇ: \n{str(file_of_log_as_path_type)}")


def main() -> bool:
    """‰∏ªË¶ÅÈñ¢Êï∞"""
    try:
        # „Ç¢„Éó„É™ÂÖ®‰Ωì„ÅÆ„Çπ„Ç±„Éº„É´
        os.environ["QT_SCALE_FACTOR"] = "0.7"
        app = QApplication(sys.argv)
        from source.convert_office_to_pdf.cotp_class import ConvertOfficeToPDF

        window = MainApp_Of_COTP(ConvertOfficeToPDF)
        window.resize(700, 600)
        window.show()
        sys.exit(app.exec())
    except ImportError as e:
        obj_of_gt = GUITools()
        obj_of_gt.show_error(str(e))
        return False
    else:
        return True


if __name__ == "__main__":
    main()
